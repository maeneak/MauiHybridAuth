@page "/Admin"
@using MauiHybridAuth.Web.Data
@using Microsoft.AspNetCore.Identity

@inject RoleManager<ApplicationRole> roleManager
@inject UserManager<ApplicationUser> userManager
@inject ISnackbar Snackbar


<PageTitle>Admin</PageTitle>
<AuthorizeView Roles="Admin" Context="authcontext">
    <Authorized>
        <MudTabs>
            <MudTabPanel Text="Users" >
                <MudDataGrid @ref="userGrid" Items="@users" ReadOnly="false" EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.OnRowClick"
                CommittedItemChanges="@((ApplicationUser user) => OnUserChanged(user))">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Application Users</MudText>
                        <MudSpacer />
                        <MudIconButton Icon="@Icons.Material.Filled.PersonAdd" />
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="x => x.FirstName" Title="Name" />
                        <PropertyColumn Property="x => x.LastName" Title="Surname" />
                        <PropertyColumn Property="x => x.Email" Title="Email" />
                        <PropertyColumn Property="x => x.UserName" />
                        <PropertyColumn Property="x => x.Roles" Title="Roles" />
                    </Columns>
                </MudDataGrid>
            </MudTabPanel>
            <MudTabPanel Text="Roles">
                <MudDataGrid @ref="roleGrid" Items="@roles" EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.OnRowClick"
                CommittedItemChanges="@((ApplicationRole user) => RoleChanged(user))" ReadOnly="false">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Application Roles</MudText>
                        <MudSpacer />
                        <MudIconButton Icon="@Icons.Material.Filled.AddCircle" OnClick="@(() => roleGrid.SetEditingItemAsync(new ApplicationRole()))" />
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn Property="x => x.Name" Title="Name" />
                        <TemplateColumn CellClass="d-flex justify-end">
                            <CellTemplate>
                                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(()=>DeleteRole(context.Item))" />
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudTabPanel>
        </MudTabs>
    </Authorized>
    <NotAuthorized>
        <MudText Typo="Typo.h6">You are not authorized to view this page.</MudText>
    </NotAuthorized>
</AuthorizeView>
@code {
    [Inject]
    private IDialogService DialogService { get; set; }
    private List<ApplicationUser> users;
    private List<ApplicationRole> roles;
    MudDataGrid<ApplicationRole> roleGrid;
    MudDataGrid<ApplicationUser> userGrid;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            users = userManager.Users.ToList();
            roles = roleManager.Roles.ToList();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async void UpdateRoles()
    {
        roles = roleManager.Roles.ToList();
        StateHasChanged();
    }
    private async void UpdateUsers()
    {
        users = userManager.Users.ToList();
        StateHasChanged();
    }
    async void RoleChanged(ApplicationRole role)
    {
        if (roleManager.RoleExistsAsync(role.Name).Result) {
            Snackbar.Add("Role already exists.");
        }
        else {
            IdentityResult result = await roleManager.CreateAsync(role);
            UpdateRoles();        }
    }
    async void DeleteRole(ApplicationRole role)
    {
        bool? confirm = await DialogService.ShowMessageBox("Confirm Delete", $"Delete the role '{role.Name}'?", yesText: "Delete", cancelText: "Cancel");
        if (confirm != null && confirm == true)
        {
            IdentityResult result = await roleManager.DeleteAsync(role);
            UpdateRoles();
        }
    }

    async void OnUserChanged(ApplicationUser user)
    {
        IdentityResult result = await userManager.UpdateAsync(user);
        UpdateUsers();
    }

}