@using MauiHybridAuth.Web.Data
@using Microsoft.AspNetCore.Identity
@inject ISnackbar Snackbar
@inject UserManager<ApplicationUser> userManager

<MudDialog Style="">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.VerifiedUser" Class="mr-3 mb-n1" />
            @MudDialog.Title
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid Spacing="4">
            <MudItem xs="12" sm="6">
                <MudImage Width="88" Height="88" Src="@User.ProfilePictureBase64" FallbackSrc="_content/MauiHybridAuth.Shared/img/profile.png" />
                <MudStack Row>
                    <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="ChangeProfilePicture" MaximumFileCount="100">
                        <ActivatorContent>
                            <MudIconButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Primary"
                            Icon="@Icons.Material.Filled.FileUpload" />
                        </ActivatorContent>
                    </MudFileUpload>
                    <MudIconButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Primary"
                    Icon="@Icons.Material.Filled.Delete" OnClick="ResetProfilePicture" />
                </MudStack>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudStack Spacing="1" AlignItems="AlignItems.End">
                    <MudLink Disabled="@(!EmailConfirmationRequired)" Typo="Typo.body2" Color="Color.Info">Re-send email confirmation</MudLink>
                    <MudLink Disabled="@(!EmailConfirmationRequired)" Typo="Typo.body2" Color="Color.Error">Manually confirm account</MudLink>
                    <MudLink Typo="Typo.body2" Color="Color.Warning" OnClick="ToggleUserLockout">
                        @(UserLocked ? "Unlock account" : "Lock account")
                    </MudLink>
                    @if(UserLocked) {
                        <MudAlert Dense Severity="Severity.Warning">User locked till: @(User.LockoutEnd.GetValueOrDefault().ToString("d") )</MudAlert>
                    } else {
                        <MudAlert Dense Severity="Severity.Success">User unlocked.</MudAlert>
                    }
                </MudStack>
            </MudItem>
            <MudItem xs="12" md="5">
                <MudTextField Required Label="Fullname" @bind-Value="User.Fullname" Variant="Variant.Text" />
            </MudItem>
            <MudItem xs="9" md="5">
                <MudTextField Required Label="Preferred Name" @bind-Value="User.PreferredName" Variant="Variant.Text" />
            </MudItem>
            <MudItem xs="3" sm="2">
                <MudTextField Required Label="Initials" @bind-Value="User.Initials" Variant="Variant.Text" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField Required Label="Email" @bind-Value="User.Email" Variant="Variant.Text" Error="@EmailConfirmationRequired" ErrorText="@(EmailConfirmationRequired ? "Not confirmed" : "")" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Required Label="Username" @bind-Value="User.UserName" Variant="Variant.Text" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Required Label="Mobile" @bind-Value="User.PhoneNumber" Variant="Variant.Text" />
            </MudItem>
            <MudItem xs="12">
                <MudSelectExtended @bind-SelectedValues="User.Roles" Label="User Roles" Dense Variant="Variant.Text"
                MultiSelection="true" ChipVariant="Variant.Filled" ChipCloseable ChipSize="Size.Small" ItemCollection="Roles"
                ValuePresenter="ValuePresenter.Chip" Color="Color.Info" />
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Info" OnClick="SaveUser">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public ApplicationUser User { get; set; } = new ApplicationUser();
    [Parameter]
    public List<string> Roles { get; set; } = new List<string>();

    private void Cancel() => MudDialog.Cancel();

    private bool EmailConfirmationRequired => userManager.Options.SignIn.RequireConfirmedEmail && !User.EmailConfirmed;

    private void SaveUser()
    {
        MudDialog.Close(User);
    }

    private bool UserLocked => User.LockoutEnabled && (User.LockoutEnd != null || User.LockoutEnd > DateTime.UtcNow);

    private async void ToggleUserLockout()
    {
        await userManager.SetLockoutEndDateAsync(User, UserLocked ? null : DateTimeOffset.MaxValue);
        StateHasChanged();
    }

    private void ResetProfilePicture()
    {
        User.ProfilePicture = new byte[0];
        StateHasChanged();
    }

    async void ChangeProfilePicture(IBrowserFile file)
    {
        if (file.Size > 1024000)
        {
            Snackbar.Add("The image is too large (max 1mb).", Severity.Error);
            return;
        }
        MemoryStream fileOut = new();
        await file.OpenReadStream(1024000).CopyToAsync(fileOut);
        User.ProfilePicture = fileOut.ToArray();
        StateHasChanged();
    }

}