@implements IDisposable
@using MauiHybridAuth.Shared.Theme
@using MauiHybridAuth.Shared.Services
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject MudThemeService mudThemeService
@inject IUserInfoService UserInfoService

<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />
<MudThemeProvider @ref="_mudThemeProvider" Theme="mudThemeService.CurrentTheme" @bind-IsDarkMode="mudThemeService.InDarkMode" />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@NavDrawerToggle" />
        <MudText Typo="Typo.h5" Class="ml-3">
            Application
            </MudText >
            <MudSpacer />
        <MudStack Row="true" AlignItems="AlignItems.Center">
            <MudIconButton Color="Color.Inherit" Icon="@mudThemeService.Icon" OnClick="@((e) => mudThemeService.ToggleMode())" Size="Size.Medium" title="@mudThemeService.CurrentMode.ToString()" />
            <AuthorizeView>
                <Authorized>
                    <MudBadge Color="Color.Success" Overlap="true" Bordered="true" Icon="@Icons.Material.Filled.Check">
                        <MudAvatar onclick="@(() => ProfileDrawerToggle())">
                            @if (UserInfoService.UserInfo != null)
                            {
                                @if (UserInfoService.UserInfo.ProfilePicture?.Length > 0)
                                {
                                    <MudImage Src="@UserInfoService.UserInfo.ProfilePicture" />
                                }
                                else
                                {
                                    <MudImage Src="_content/MauiHybridAuth.Shared/img/profile.png" />
                                }
                            }
                            else
                            {
                                <MudImage Src="_content/MauiHybridAuth.Shared/img/profile.png"/>
                            }
                        </MudAvatar>
                    </MudBadge>
                </Authorized>
                <NotAuthorized>
                    <MudBadge Color="Color.Error" Overlap="true" Bordered="true">
                        <MudAvatar onclick="@(() => ProfileDrawerToggle())">
                            <MudImage Src="_content/MauiHybridAuth.Shared/img/profile.png" />
                        </MudAvatar>
                    </MudBadge>
                </NotAuthorized>
            </AuthorizeView>
        </MudStack>
    </MudAppBar>
    <MudDrawer @bind-Open="_navDrawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudDrawer Width="320px" Class="pa-2 pl-5 pr-5" @bind-Open="ProfileDrawerOpen" Variant="DrawerVariant.Temporary" 
    ClipMode="DrawerClipMode.Always" Anchor="Anchor.Right" Elevation="2" OverlayAutoClose="true">
        <ProfileMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool ProfileDrawerOpen { get; set; } = false;
    private bool _navDrawerOpen = true;
    MudThemeProvider? _mudThemeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            mudThemeService.SystemInDarkMode = await _mudThemeProvider!.GetSystemPreference();
            mudThemeService.CurrentMode = mudThemeService.SystemInDarkMode ? ThemeColorMode.Dark : ThemeColorMode.Light;
            StateHasChanged();
        }
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        mudThemeService.SystemInDarkMode = newValue;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        ProfileDrawerOpen = false;
        StateHasChanged();

    }

    private void NavDrawerToggle()
    {
        _navDrawerOpen = !_navDrawerOpen;
    }

    private void ProfileDrawerToggle()
    {
        ProfileDrawerOpen = !ProfileDrawerOpen;
    }
    void IDisposable.Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}