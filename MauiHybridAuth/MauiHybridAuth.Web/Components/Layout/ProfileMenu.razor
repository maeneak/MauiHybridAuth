@using MauiHybridAuth.Shared.Theme
@using MauiHybridAuth.Web.Components.Account
@inject NavigationManager NavigationManager
@inject IdentityUserAccessor UserAccessor

<MudGrid>
    <AuthorizeView >
        <Authorized>
            <MudItem>

            </MudItem>
        </Authorized>
    </AuthorizeView>
    <MudSelect Label="Color Mode" @bind-Value="CustomAppTheme!.CurrentMode" 
    Dense="true"
    Variant="Variant.Text" Style="width:150px" 
    SelectedValuesChanged="@((IEnumerable<ThemeColorMode> e) => OnColorModeChanged(e))">
        <MudSelectItem Value="ThemeColorMode.System" Style="vertical-align:middle">
            <MudStack Row>
                <MudIcon Icon="@Icons.Material.Outlined.SettingsPower" />
                <MudText>System</MudText>
            </MudStack>
        </MudSelectItem>
        <MudSelectItem Value="ThemeColorMode.Light">
            <MudStack Row>
                <MudIcon Icon="@Icons.Material.Outlined.LightMode" />
                <MudText>Light</MudText>
            </MudStack>
        </MudSelectItem>
        <MudSelectItem Value="ThemeColorMode.Dark">
            <MudStack Row>
                <MudIcon Icon="@Icons.Material.Outlined.DarkMode" />
                <MudText>Dark</MudText>
            </MudStack>
        </MudSelectItem>
    </MudSelect>
</MudGrid>

@code {
    [CascadingParameter]
    private CustomAppTheme? CustomAppTheme { get; set; }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    private void OnColorModeChanged(IEnumerable<ThemeColorMode> args)
    {
        NavigationManager.Refresh();
    }
}
